{{TDClassSummary|label=OP|summary=The OP class defines a reference to a single [[Operator|operator]].}}
<section begin=HELPBODY />
{{ClassMemberSection|empty=
		|Sectionsummary=
		|items=
{{SubSection|title=General
		|text=
}}
{{ClassMember
    |class=OP
    |name=valid
    |type=bool
    |set=0
    |text=True if the referenced operator currently exists, False if it has been deleted.
}}
{{ClassMember
    |class=OP
    |name=id
    |type=int
    |set=0
    |text=Unique id for the operator. This id can also be passed to the op() and ops() methods. Id's are not consistent when a file is re-opened, and will change if the OP is copied/pasted, changes OP types, deleted/undone. The id will not change if the OP is renamed though. Its data type is integer.
}}
{{ClassMember
    |class=OP
    |name=name
    |type=str
    |set=1
    |text=Get or set the operator name.
}}
{{ClassMember
    |class=OP
    |name=path
    |type=str
    |set=0
    |text=Full path to the operator.
}}
{{ClassMember
    |class=OP
    |name=digits
    |type=int
    |set=0
    |text=Returns the numeric value of the last consecutive group of digits in the name, or None if not found. The digits can be in the middle of the name if there are none at the end of the name.
}}
{{ClassMember
    |class=OP
    |name=base
    |type=str
    |set=0
    |text=Returns the beginning portion of the name occurring before any digits.
}}
{{ClassMember
    |class=OP
    |name=passive
    |type=bool
    |set=0
    |text=If true, operator will not cook before its access methods are called.  To use a passive version of an operator n, use passive(n).
}}
{{ClassMember
    |class=OP
    |name=curPar
    |type=td.Par
    |set=0
    |text=The parameter currently being evaluated. Can be used in a parameter expression to reference itself.
}}
{{ClassMember
    |class=OP
    |name=time
    |type=OP
    |set=0
    |text=[[timeCOMP Class|Time Component]] that defines the operator's time reference.}}
{{ClassMember
    |class=OP
    |name=ext
    |type=class
    |set=0
    |text=The object to search for parent [[Extensions|extensions]].
<syntaxhighlight lang="python">
me.ext.MyClass
</syntaxhighlight>}}
{{ClassMember
    |class=OP
    |name=mod
    |type=mod
    |set=0
    |text=Get a [[MOD Class|module on demand]] object that searches for DAT modules relative to this operator.}}
{{ClassMember
    |class=OP
    |name=pages
    |type=list
    |set=0
    |text=A list of all built-in pages.}}
{{ClassMember
    |class=OP
    |name=parGroup
    |type=tuple
    |set=0
    |text=An intermediate [[ParGroupCollection Class|parameter collection]] object, from which a specific [[ParGroup Class|parameter group]] can be found.
<syntaxhighlight lang="python">
n.parGroup.t
# or
n.parGroup['t']
</syntaxhighlight>}}
{{ClassMember
    |class=OP
    |name=par
    |type=td.Par
    |set=0
    |text=An intermediate [[ParCollection Class|parameter collection]] object, from which a specific [[Par Class|parameter]] can be found.
<syntaxhighlight lang="python">
n.par.tx
# or
n.par['tx']
</syntaxhighlight>}}
{{ClassMember
    |class=OP
    |name=builtinPars
    |type=list or par
    |set=0
    |text=A list of all [[Par Class|built-in parameters]].}}
{{ClassMember
    |class=OP
    |name=customParGroups
    |type=list of parGroups
    |set=0
    |text=A list of all [[ParGroup Class|ParGroups]], where a ParGroup is a set of parameters all drawn on the same line of a dialog, sharing the same label.}}
{{ClassMember
    |class=OP
    |name=customPars
    |type=list of par
    |set=0
    |text=A list of all [[Par Class|custom parameters]].}}
{{ClassMember
    |class=OP
    |name=customPages
    |type=list
    |set=0
    |text=A list of all [[Page Class|custom pages]].}}
{{ClassMember
    |class=OP
    |name=customTuplets
    |deprecated=True
    |type=list
    |set=0
    |text=A list of all parameter tuplets, where a tuplet is a set of parameters all drawn on the same line of a dialog, sharing the same label.
}}
{{ClassMember
    |class=OP
    |name=replicator
    |type=OP or None
    |set=0
    |text=The [[replicatorCOMP Class|replicatorCOMP]] that created this operator, if any.}}
{{ClassMember
    |class=OP
    |name=storage
    |type=dict
    |set=0
    |text=[[Storage]] is dictionary associated with this operator. Values stored in this dictionary are persistent, and saved with the operator. The dictionary attribute is read only, but not its contents. Its contents may be manipulated directly with methods such as OP.fetch() or OP.store() described below, or examined with an [[Examine DAT]].}}
{{ClassMember
    |class=OP
    |name=tags
    |type=list
    |set=1
    |text=Get or set a set of user defined strings. [[Tag|Tags]] can be searched using OP.findChildren() and the [[OP Find DAT]].
The set is a regular python set, and can be accessed accordingly:
<syntaxhighlight lang="python">
n.tags = ['effect', 'image filter']
n.tags.add('darken')
</syntaxhighlight>}}
{{ClassMember
    |class=OP
    |name=children
    |type=list
    |set=0
    |text=A list of [[OP Class|operators]] contained within this operator. Only [[COMP Class|component]] operators have children, otherwise an empty list is returned.}}
{{ClassMember
    |class=OP
    |name=numChildren
    |type=int
    |set=0
    |text=Returns the number of children contained within the operator. Only [[COMP Class|component]] operators have children.}}
{{ClassMember
    |class=OP
    |name=numChildrenRecursive
    |type=int
    |set=0
    |text=Returns the number of operators contained recursively within this operator. Only [[COMP Class|component]] operators have children.}}
{{ClassMember
    |class=OP
    |name=op
    |type=OP or None
    |set=0
    |text=The operator finder object, for accessing operators through paths or shortcuts. '''Note:''' a version of this method that searches relative to '/' is also in the global [[td Module|td module]].

<code>'''op(pattern1, pattern2..., includeUtility=False)'''</code> &rarr; <code class="return">[[OP Class|OP]] or None</code>
<blockquote>
Returns the first OP whose path matches the given pattern, relative to the inside of this operator. Will return None if nothing is found. Multiple patterns may be specified which are all added to the search. Numeric OP ids may also be used.
* <code>pattern</code> - Can be string following the [[Pattern Matching]] rules, specifying which OP to return, or an integer, which must be an OP Id. Multiple patterns can be given, the first matching OP will be returned.
* <code>includeUtility</code> '''(Optional)''' - if True, allow [[Network_Utilities:_Comments,_Network_Boxes,_Annotates|Utility nodes]] to be returned. If False, Utility operators will be ignored.

<syntaxhighlight lang="python">
b = op('project1')
b = op('foot*', 'hand*') #comma separated
b = op('foot* hand*')  #space separated
b = op(154)
</syntaxhighlight>
</blockquote>
<code>'''op.shortcut'''</code> &rarr; <code>OP</code>
<blockquote>
:An operator specified with by a [[Global OP Shortcut]]. If no operator exists an exception is raised. These shortcuts are global, and must be unique. That is, cutting and pasting an operator with a Global OP Shortcut specified will lead to a name conflict. One shortcut must be renamed in that case. Furthermore, only components can be given Global OP Shortcuts.
:*<code>shortcut</code> - Corresponds to the Global OP Shortcut parameter specified in the target operator.
<syntaxhighlight lang="python">
b = op.Videoplayer 
</syntaxhighlight>
To list all Global OP Shortcuts:
<syntaxhighlight lang="python">
for x in op:
	print(x)
</syntaxhighlight>
</blockquote>}}
{{ClassMember
    |class=OP
    |name=parent
    |type=OP
    |set=0
    |text=The [[Parent Shortcut|Parent Shortcut]] object, for accessing parent components through indices or shortcuts.
'''Note:''' ''a version of this method that searches relative to the current operator is also in the global [[td Module|td module]].''

<code class="python">parent(n)</code> &rarr; <code class="return">OP or None</code>
<blockquote>
The nth parent of this operator. If n not specified, returns the parent. If n = 2, returns the parent of the parent, etc. If no parent exists at that level, None is returned.
*n - (Optional) n is the number of levels up to climb. When n = 1 it will return the operator's parent.
<syntaxhighlight lang="python">
p = parent(2) #grandfather
</syntaxhighlight>
</blockquote>
<code class="python">parent.shortcut</code> &rarr; <code class="return">OP</code>
<blockquote>
A parent component specified with a shortcut. If no parent exists an exception is raised.
*shortcut - Corresponds to the [[Parent Shortcut]] parameter specified in the target parent.
<syntaxhighlight lang="python">
n = parent.Videoplayer
</syntaxhighlight>
See also Parent Shortcut for more examples.</blockquote>}}
{{ClassMember
    |class=OP
    |name=iop
    |type=OP
    |set=0
    |text=The Internal Operator Shortcut object, for accessing internal shortcuts. See also [[Internal Operators]].

'''Note:''' a version of this method that searches relative to the current operator is also in the global [[td Module]].}}
{{ClassMember
    |class=OP
    |name=ipar
    |type=OP
    |set=0
    |text=The Internal Operator Parameter Shortcut object, for accessing internal shortcuts.  See also [[Internal Parameters]].
    
'''Note:''' a version of this method that searches relative to the current operator is also in the global [[td Module]].}}
{{ClassMember
    |class=OP
    |name=currentPage
    |type=[[Page Class|Page]]
    |set=1
    |text=Get or set the currently displayed parameter page. It can be set by setting it to another page or a string label.
<syntaxhighlight lang="python">n.currentPage = 'Common'</syntaxhighlight>
}}
{{SubSection|title=Common Flags
		|text=The following methods get or set specific operator [[Flag|Flags]]. Note specific operators may contain other flags not in this section.
}}
{{ClassMember
    |class=OP
    |name=activeViewer
    |type=bool
    |set=1
    |text=Get or set [[Viewer Active Flag]].}}
{{ClassMember
    |class=OP
    |name=allowCooking
    |type=bool
    |set=1
    |text=Get or set [[Cooking Flag]]. Only COMPs can disable this flag.}}
{{ClassMember
    |class=OP
    |name=bypass
    |type=bool
    |set=1
    |text=Get or set [[Bypass Flag]].}}
{{ClassMember
    |class=OP
    |name=cloneImmune
    |type=bool
    |set=1
    |text=Get or set [[Immune Flag|Clone Immune Flag]].}}
{{ClassMember
    |class=OP
    |name=current
    |type=bool
    |set=1
    |text=Get or set [[Current Flag]].}}
{{ClassMember
    |class=OP
    |name=display
    |type=bool
    |set=1
    |text=Get or set [[Display Flag]].}}
{{ClassMember
    |class=OP
    |name=expose
    |type=bool
    |set=1
    |text=Get or set the [[Expose Flag]] which hides a node from view in a network.}}
{{ClassMember
    |class=OP
    |name=lock
    |type=bool
    |set=1
    |text=Get or set [[Lock Flag]].}}
{{ClassMember
    |class=OP
    |name=selected
    |type=bool
    |set=1
    |text=Get or set [[Selected Flag]]. This controls if the node is part of the network selection. (yellow box around it).}}
{{ClassMember
    |class=OP
    |name=python
    |type=bool
    |set=1
    |text=Get or set parameter expression language as python.
}}
{{ClassMember
    |class=OP
    |name=render
    |type=bool
    |set=1
    |text=Get or set [[Render Flag]].}}
{{ClassMember
    |class=OP
    |name=showCustomOnly
    |type=bool
    |set=1
    |text=Get or set the Show Custom Only Flag which controls whether or not non custom parameters are display in[[Parameter Dialog | parameter dialogs]].}}
{{ClassMember
    |class=OP
    |name=showDocked
    |type=bool
    |set=1
    |text=Get or set [[Docking|Show Docked Flag]]. This controls whether this node is visible or hidden when it is docked to another node.}}
{{ClassMember
    |class=OP
    |name=viewer
    |type=bool
    |set=1
    |text=Get or set [[Viewer Flag]].}}
{{SubSection|title=Appearance
		|text=
}}
{{ClassMember
    |class=OP
    |name=color
    |type=tuple(r, g, b)
    |set=1
    |text=Get or set color value, expressed as a 3-tuple, representing its red, green, blue values. To convert between color spaces, use the built in colorsys module.
}}
{{ClassMember
    |class=OP
    |name=comment
    |type=str
    |set=1
    |text=Get or set comment string.
}}
{{ClassMember
    |class=OP
    |name=nodeHeight
    |type=int
    |set=1
    |text=Get or set node height, expressed in [[NetworkEditor Class|network editor]] units.}}
{{ClassMember
    |class=OP
    |name=nodeWidth
    |type=int
    |set=1
    |text=Get or set node width, expressed in [[NetworkEditor Class|network editor]] units.}}
{{ClassMember
    |class=OP
    |name=nodeX
    |type=int
    |set=1
    |text=Get or set node X value, expressed in [[NetworkEditor Class|network editor]] units, measured from its left edge.}}
{{ClassMember
    |class=OP
    |name=nodeY
    |type=int
    |set=1
    |text=Get or set node Y value, expressed in [[NetworkEditor Class|network editor]] units, measured from its bottom edge.}}
{{ClassMember
    |class=OP
    |name=nodeCenterX
    |type=int
    |set=1
    |text=Get or set node X value, expressed in [[NetworkEditor Class|network editor]] units, measured from its center.}}
{{ClassMember
    |class=OP
    |name=nodeCenterY
    |type=int
    |set=1
    |text=Get or set node Y value, expressed in [[NetworkEditor Class|network editor]] units, measured from its center.}}
{{ClassMember
    |class=OP
    |name=dock
    |type=OP
    |set=1
    |text=Get or set the [[OP Class|operator]] this operator is docked to.  To clear docking, set this member to None.}}
{{ClassMember
    |class=OP
    |name=docked
    |type=list
    |set=0
    |text=The (possibly empty) list of [[OP Class|operators]] docked to this node.}}
{{SubSection|title=Connection
		|text=See also the <code>OP.parent</code> methods.  To connect components together see [[COMP_Class#Connection]] section.
}}
{{ClassMember
    |class=OP
    |name=inputs
    |type=list
    |set=0
    |text=List of input [[OP Class|operators]] (via left side connectors) to this operator. To get the number of inputs, use len(OP.inputs).}}
{{ClassMember
    |class=OP
    |name=outputs
    |type=list
    |set=0
    |text=List of output [[OP Class|operators]] (via right side connectors) from this operator.}}
{{ClassMember
    |class=OP
    |name=inputConnectors
    |type=list
    |set=0
    |text=List of input [[Connector Class|connectors]] (on the left side) associated with this operator.}}
{{ClassMember
    |class=OP
    |name=outputConnectors
    |type=list
    |set=0
    |text=List of output [[Connector Class|connectors]] (on the right side) associated with this operator.}}
{{SubSection|title=Cook Information
		|text=
}}
{{ClassMember
    |class=OP
    |name=cookFrame
    |type=float
    |set=0
    |text=Last frame at which this operator cooked.
}}
{{ClassMember
    |class=OP
    |name=cookTime
    |type=float
    |set=0
    |text='''Deprecated''' Duration of the last measured cook (in milliseconds).
}}
{{ClassMember
    |class=OP
    |name=cpuCookTime
    |type=float
    |set=0
    |text=Duration of the last measured cook in CPU time (in milliseconds).
}}
{{ClassMember
    |class=OP
    |name=cookAbsFrame
    |type=float
    |set=0
    |text=Last absolute frame at which this operator cooked.
}}
{{ClassMember
    |class=OP
    |name=cookStartTime
    |type=float
    |set=0
    |text=Last offset from frame start at which this operator cook began, expressed in milliseconds.
}}
{{ClassMember
    |class=OP
    |name=cookEndTime
    |type=float
    |set=0
    |text=Last offset from frame start at which this operator cook ended, expressed in milliseconds.  Other operators may have cooked between the start and end time.  See the cookTime member for this operator's specific cook duration.
}}
{{ClassMember
    |class=OP
    |name=cookedThisFrame
    |type=bool
    |set=0
    |text=True when this operator has cooked this frame.
}}
{{ClassMember
    |class=OP
    |name=cookedPreviousFrame
    |type=bool
    |set=0
    |text=True when this operator has cooked the previous frame.
}}
{{ClassMember
    |class=OP
    |name=childrenCookTime
    |type=float
    |set=0
    |text='''Deprecated''' The total accumulated cook time of all children of this operator during the last frame. Zero if the operator is not a [[COMP Class|COMP]] and/or has no children.}}
{{ClassMember
    |class=OP
    |name=childrenCPUCookTime
    |type=float
    |set=0
    |text=The total accumulated cook time of all children of this operator during the last frame. Zero if the operator is not a [[COMP Class|COMP]] and/or has no children.}}
{{ClassMember
    |class=OP
    |name=childrenCookAbsFrame
    |type=float
    |set=0
    |text='''Deprecated''' The absolute frame on which childrenCookTime is based.
}}
{{ClassMember
    |class=OP
    |name=childrenCPUCookAbsFrame
    |type=float
    |set=0
    |text=The absolute frame on which childrenCPUCookTime is based.
}}
{{ClassMember
    |class=OP
    |name=gpuCookTime
    |type=float
    |set=0
    |text=Duration of GPU operations during the last measured cook (in milliseconds).
}}
{{ClassMember
    |class=OP
    |name=childrenGPUCookTime
    |type=float
    |set=0
    |text=The total accumulated GPU cook time of all children of this operator during the last frame. Zero if the operator is not a COMP and/or has no children.
}}
{{ClassMember
    |class=OP
    |name=childrenGPUCookAbsFrame
    |type=float
    |set=0
    |text=The absolute frame on which childrenGPUCookTime is based.
}}
{{ClassMember
    |class=OP
    |name=totalCooks
    |type=int
    |set=0
    |text=Number of times the operator has cooked.
}}
{{ClassMember
    |class=OP
    |name=cpuMemory
    |type=int
    |set=0
    |text=The approximate amount of CPU memory this Operator is using, in bytes.
}}
{{ClassMember
    |class=OP
    |name=gpuMemory
    |type=int
    |set=0
    |text=The amount of GPU memory this OP is using, in bytes.
}}
{{SubSection|title=Type
		|text=
}}
{{ClassMember
    |class=OP
    |name=type
    |type=str
    |set=0
    |text=Operator type as a string. Example: 'oscin'.
}}
{{ClassMember
    |class=OP
    |name=subType
    |type=str
    |set=0
    |text=Operator subtype. Currently only implemented for [[Component|components]]. May be one of: 'panel', 'object', or empty string in the case of base components.}}
{{ClassMember
    |class=OP
    |name=OPType
    |type=str
    |set=0
    |text=Python operator class type, as a string. Example: 'oscinCHOP'. Can be used with COMP.create() method.
}}
{{ClassMember
    |class=OP
    |name=label
    |type=str
    |set=0
    |text=Operator type label. Example: 'OSC In'.
}}
{{ClassMember
    |class=OP
    |name=icon
    |type=str
    |set=0
    |text=Get the letters used to create the operator's icon.
}}
{{ClassMember
    |class=OP
    |name=family
    |type=str
    |set=0
    |text=Operator family. Example: CHOP. Use the global dictionary families for a list of each operator type.
}}
{{ClassMember
    |class=OP
    |name=isFilter
    |type=bool
    |set=0
    |text=True if operator is a filter, false if it is a generator.
}}
{{ClassMember
    |class=OP
    |name=minInputs
    |type=int
    |set=0
    |text=Minimum number of inputs to the operator.
}}
{{ClassMember
    |class=OP
    |name=maxInputs
    |type=int
    |set=0
    |text=Maximum number of inputs to the operator.
}}
{{ClassMember
    |class=OP
    |name=isMultiInputs
    |type=bool
    |set=0
    |text=True if inputs are ordered, false otherwise. Operators with an arbitrary number of inputs have unordered inputs, example [[Merge CHOP]].}}
{{ClassMember
    |class=OP
    |name=visibleLevel
    |type=int
    |set=0
    |text=Visibility level of the operator. For example, expert operators have visibility level 1, regular operators have visibility level 0.
}}
{{ClassMember
    |class=OP
    |name=isBase
    |type=bool
    |set=0
    |text=True if the operator is a Base (miscellaneous) [[Component|component]].}}
{{ClassMember
    |class=OP
    |name=isCHOP
    |type=bool
    |set=0
    |text=True if the operator is a [[CHOP]].}}
{{ClassMember
    |class=OP
    |name=isCOMP
    |type=bool
    |set=0
    |text=True if the operator is a [[Component|component]].}}
{{ClassMember
    |class=OP
    |name=isDAT
    |type=bool
    |set=0
    |text=True if the operator is a [[DAT]].}}
{{ClassMember
    |class=OP
    |name=isMAT
    |type=bool
    |set=0
    |text=True if the operator is a [[MAT|Material]].}}
{{ClassMember
    |class=OP
    |name=isObject
    |type=bool
    |set=0
    |text=True if the operator is an [[object]].}}
{{ClassMember
    |class=OP
    |name=isPanel
    |type=bool
    |set=0
    |text=True if the operator is a [[Panel]].}}
{{ClassMember
    |class=OP
    |name=isSOP
    |type=bool
    |set=0
    |text=True if the operator is a [[SOP]].}}
{{ClassMember
    |class=OP
    |name=isTOP
    |type=bool
    |set=0
    |text=True if the operators is a [[TOP]].}}
{{ClassMember
    |class=OP
    |name=licenseType
    |type=str
    |set=0
    |text=Type of [[License Class|License]] required for the operator.}}}}
{{ClassMethodSection|empty=
		|Sectionsummary=
		|items=
{{SubSection|title=General
        |text='''NOTE''': <code>create()</code>, <code>copy()</code> and <code>copyOPs()</code> is done by the parent operator (a component).  For more information see [[COMP Class#Methods|COMP.create, COMP.copy and COMP.copyOPs methods]].

}}
{{ClassMethod
    |class=OP
    |name=pars
    |call=pars(pattern)
    |returns=list
    |text=Returns a (possibly empty) list of [[Par Class|parameter objects]] that match the pattern.
*pattern - Is a string following the [[Pattern Matching]] rules, specifying which parameters to return.
<syntaxhighlight lang="python">
newlist = op('geo1').pars('t?', 'r?', 's?') #translate/rotate/scale parameters
</syntaxhighlight>Note: If searching for a single parameter given a name, it's much more efficient to use the subscript operator. For example:<syntaxhighlight lang="python">name = 'MyName1'
op('geo1').par[name]</syntaxhighlight>}}
{{ClassMethod
    |class=OP
    |name=cook
    |call=cook(force=False, recurse=False, includeUtility=False)
    |returns=None
    |text=Cook the contents of the operator if required.
*force - (Keyword, Optional) If True, the operator will always cook, even if it wouldn't under normal circumstances.
*recurse - (Keyword, Optional) If True, all children and sub-children of the operator will be cooked.
*includeUtility - (Keyword, Optional) If specified, controls whether or not utility components (eg Comments) are included in the results.
}}
{{ClassMethod
    |class=OP
    |name=copyParameters
    |call=copyParameters(OP, custom=True, builtin=True)
    |returns=None
    |text=Copy all of the parameters from the specified [[OP Class|operator]].  Both operators should be the same type.
*OP - The operator to copy.
*custom - (Keyword, Optional) When True, custom parameters will be copied. 
*builtin - (Keyword, Optional) When True, built in parameters will be copied.
<syntaxhighlight lang="python">
op('geo1').copyParameters( op('geo2') )
</syntaxhighlight>}}
{{ClassMethod
    |class=OP
    |name=changeType
    |call=changeType(OPtype)
    |returns=OP
    |text=Change referenced operator to a new operator type.  After this call, this OP object should no longer be referenced.  Instead use the returned OP object.
*OPtype - The python class name of the operator type you want to change this operator to. This is not a string, but instead is a class defined in the global [[td Module|td module]].
<syntaxhighlight lang="python">
n = op('wave1').changeType(nullCHOP) #changes 'wave1' into a Null CHOP
n = op('text1').changeType(tcpipDAT) #changes 'text1' operator into a TCPIP DAT
</syntaxhighlight>}}
{{ClassMethod
    |class=OP
    |name=dependenciesTo
    |call=dependenciesTo(OP)
    |returns=list
    |text=Returns a (possibly empty) list of operator dependency paths between this operator and the specified operator. Multiple paths may be found.
}}
{{ClassMethod
    |class=OP
    |name=evalExpression
    |call=evalExpression(str)
    |returns=value
    |text=Evaluate the expression from the context of this OP.  Can be used to evaluate arbitrary snippets of code from arbitrary locations. 
*str - The expression to evaluate.
<syntaxhighlight lang="python">
op('wave1').evalExpression('me.digits')  #returns 1
</syntaxhighlight>
If the expression already resides in a parameter, use that parameters [[Par Class|evalExpression()]] method instead.}}
{{ClassMethod
    |class=OP
    |name=destroy
    |call=destroy()
    |returns=None
    |text=Destroy the operator referenced by this OP. An exception will be raised if the OP's operator has already been destroyed.
}}
{{ClassMethod
    |class=OP
    |name=var
    |call=var(name, search=True)
    |returns=str
    |text=Evaluate a[[Variables | variable]]. This will return the empty string, if not found. Most information obtained from variables (except for Root and Component variables) are accessible through other means in Python, usually in the global [[td Module|td module]].
*name - The variable name to search for.
*search - (Keyword, Optional) If set to True (which is default) the operator hierarchy is searched until a variable matching that name is found.  If false, the search is constrained to the operator.}}
{{ClassMethod
    |class=OP
    |name=openMenu
    |call=openMenu(x=None, y=None)
    |returns=None
    |text=Open a node menu for the operator at x, y.  Opens at mouse if x & y are not specified.
*x - (Keyword, Optional) The X coordinate of the menu, measured in screen pixels.
*y - (Keyword, Optional) The Y coordinate of the menu, measured in screen pixels. 
}}
{{ClassMethod
    |class=OP
    |name=relativePath
    |call=relativePath(OP)
    |returns=str
    |text=Returns the relative path from this operator to the OP that is passed as the argument.   See OP.shortcutPath for a version using expressions.}}
{{ClassMethod
    |class=OP
    |name=setInputs
    |call=setInputs(listOfOPs)
    |returns=None
    |text=Set all the operator inputs to the specified list.
* listOfOPs - A list containing one or more OPs. Entries in the list can be None to disconnect specific inputs.  An empty list disconnects all inputs.}}
{{ClassMethod
    |class=OP
    |name=shortcutPath
    |call=shortcutPath(OP, toParName=None)
    |returns=str
    |text=Returns an expression from this operator to the OP that is passed as the argument. See OP.relativePath for a version using relative path constants.
* toParName - (Keyword, Optional) Return an expression to this parameter instead of its operator.}}
{{ClassMethod
    |class=OP
    |name=ops
    |call=ops(pattern1, pattern2.., includeUtility=False)
    |returns=list of OPs
    |text=Returns a (possibly empty) list of OPs that match the patterns, relative to the inside of this OP.
Multiple patterns may be provided. Numeric OP ids may also be used.
*pattern - Can be string following the [[Pattern Matching]] rules, specifying which OPs to return, or an integer, which must be an OP Id. Multiple patterns can be given and all matched OPs will be returned.
*includeUtility - (Keyword, Optional) If specified, controls whether or not utility components (eg Comments) are included in the results.
'''Note:''' a version of this method that searches relative to '/' is also in the global [[td Module|td module]].
<syntaxhighlight lang="python">
newlist = n.ops('arm*', 'leg*', 'leg5/foot*')
</syntaxhighlight>}}
{{SubSection|title=Errors
        |text=
}}
{{ClassMethod
    |class=OP
    |name=addScriptError
    |call=addScriptError(msg)
    |returns=None
    |text=Adds a script error to a node.
*msg - The error to add.
}}
{{ClassMethod
    |class=OP
    |name=addError
    |call=addError(msg)
    |returns=None
    |text=Adds an error to an operator.  Only valid if added while the operator is cooking. (Example Script SOP, CHOP, DAT).
*msg - The error to add.
}}
{{ClassMethod
    |class=OP
    |name=addWarning
    |call=addWarning(msg)
    |returns=None
    |text=Adds a warning to an operator.  Only valid if added while the operator is cooking. (Example Script SOP, CHOP, DAT).
*msg - The error to add.
}}
{{ClassMethod
    |class=OP
    |name=errors
    |call=errors(recurse=False)
    |returns=str
    |text=Get error messages associated with this OP.
*recurse - Get errors in any children or subchildren as well.
}}
{{ClassMethod
    |class=OP
    |name=warnings
    |call=warnings(recurse=False)
    |returns=str
    |text=Get warning messages associated with this OP.
*recurse - Get warnings in any children or subchildren as well.
}}
{{ClassMethod
    |class=OP
    |name=scriptErrors
    |call=scriptErrors(recurse=False)
    |returns=str
    |text=Get script error messages associated with this OP.
*recurse - Get errors in any children or subchildren as well.
}}
{{ClassMethod
    |class=OP
    |name=clearScriptErrors
    |call=clearScriptErrors(recurse=False, error='*')
    |returns=None
    |text=Clear any errors generated during script execution.  These may be generated during execution of DATs, Script Nodes, Replicator COMP callbacks, etc.
*recurse - Clear script errors in any children or subchildren as well.
*error - Pattern to match when clearing errors
<syntaxhighlight lang="python">
op('/project1').clearScriptErrors(recurse=True)
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=childrenCPUMemory
    |call=childrenCPUMemory()
    |returns=int
    |text=Returns the total CPU memory usage for all the children from this COMP.}}
{{ClassMethod
    |class=OP
    |name=childrenGPUMemory
    |call=childrenGPUMemory()
    |returns=int
    |text=Returns the total GPU memory usage for all the children from this COMP.}}    
{{SubSection|title=Appearance
        |text=
}}
{{ClassMethod
    |class=OP
    |name=resetNodeSize
    |call=resetNodeSize()
    |returns=None
    |text=Reset the node tile size to its default width and height.
}}
{{SubSection|title=Viewers
        |text=
}}
{{ClassMethod
    |class=OP
    |name=closeViewer
    |call=closeViewer(topMost=False)
    |returns=None
    |text=Close the floating content viewers of the OP.
*topMost - (Keyword, Optional) If True, any viewer window containing any parent of this OP is closed instead.
<syntaxhighlight lang="python">
op('wave1').closeViewer()
op('wave1').closeViewer(topMost=True) # any viewer that contains 'wave1' will be closed.
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=openViewer
    |call=openViewer(unique=False, borders=True)
    |returns=None
    |text=Open a floating content viewer for the OP.
*unique - (Keyword, Optional) If False, any existing viewer for this OP will be re-used and popped to the foreground. If unique is True, a new window is created each time instead.
*borders - (Keyword, Optional) If true, the floating window containing the viewer will have borders.
<syntaxhighlight lang="python">
op('geo1').openViewer(unique=True, borders=False) # opens a new borderless viewer window for 'geo1'
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=resetViewer
    |call=resetViewer(recurse=False)
    |returns=None
    |text=Reset the OP content viewer to default view settings.
*recurse - (Keyword, Optional) If True, this is done for all children and sub-children as well.
<syntaxhighlight lang="python">
op('/').resetViewer(recurse=True) # reset the viewer for all operators in the entire file.
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=openParameters
    |call=openParameters()
    |returns=None
    |text=Open a floating dialog containing the operator parameters.
}}
{{SubSection|title=Storage
        |text=
[[Storage]] can be used to keep data within components. Storage is implemented as one python dictionary per node.  

When an element of storage is changed by using <code>n.store()</code> as explained below, expressions and operators that depend on it will automatically re-cook.  It is retrieved with the <code>n.fetch()</code> function.

Storage is saved in <code>.toe</code> and <code>.tox</code> files and restored on startup.

Storage can hold any python object type (not just strings as in Tscript variables).  Storage elements can also have optional startup values, specified separately. Use these startup values for example, to avoid saving and loading some session specific object, and instead save or load a well defined object like <code>None</code>.

See the [[Examine DAT]] for procedurally viewing the contents of storage.
}}
{{ClassMethod
    |class=OP
    |name=fetch
    |call=fetch(key, default, search=True, storeDefault=False)
    |returns=value
    |text=Return an object from the OP storage dictionary.  If the item is not found, and a default it supplied, it will be returned instead.
*key - The name of the entry to retrieve.
*default - (Optional) If provided and no item is found then the passed value/object is returned instead.
*storeDefault - (Keyword, Optional) If True, and the key is not found, the default is stored as well.
*search - (Keyword, Optional) If True, the parent of each OP is searched recursively until a match is found
<syntaxhighlight lang="python">
v = n.fetch('sales5', 0.0)
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=fetchOwner
    |call=fetchOwner(key)
    |returns=OP
    |text=Return the operator which contains the stored key, or None if not found.
*key - The key to the stored entry you are looking for.
<syntaxhighlight lang="python">
who = n.fetchOwner('sales5') #find the OP that has a storage entry called 'sales5'
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=store
    |call=store(key, value)
    |returns=value
    |text=Add the key/value pair to the OP's storage dictionary, or replace it if it already exists.  If this value is not intended to be saved and loaded in the toe file, it can be be given an alternate value for saving and loading, by using the method storeStartupValue described below.
*key - A string name for the storage entry. Use this name to retrieve the value using fetch().
*value - The value/object to store.
<syntaxhighlight lang="python">
n.store('sales5', 34.5) # stores a floating point value 34.5.
n.store('moviebank', op('/project1/movies')) # stores an OP for easy access later on.
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=unstore
    |call=unstore(keys1, keys2..)
    |returns=None
    |text=For key, remove it from the OP's storage dictionary. Pattern Matching is supported as well.
*keys - The name or pattern defining which key/value pairs to remove from the storage dictionary.
<syntaxhighlight lang="python">
n.unstore('sales*') # removes all entries from this OPs storage that start with 'sales'
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=storeStartupValue
    |call=storeStartupValue(key, value)
    |returns=None
    |text=Add the key/value pair to the OP's storage startup dictionary.  The storage element will take on this value when the file starts up.
*key - A string name for the storage startup entry.
*value - The startup value/object to store.
<syntaxhighlight lang="python">
n.storeStartupValue('sales5', 1) # 'sales5' will have a value of 1 when the file starts up.
</syntaxhighlight>
}}
{{ClassMethod
    |class=OP
    |name=unstoreStartupValue
    |call=unstoreStartupValue(keys1, keys2..)
    |returns=None
    |text=For key, remove it from the OP's storage startup dictionary. Pattern Matching is supported as well.  This does not affect the stored value, just its startup value.
*keys - The name or pattern defining which key/value pairs to remove from the storage startup dictionary.
<syntaxhighlight lang="python">
n.unstoreStartupValue('sales*') # removes all entries from this OPs storage startup that start with 'sales'
</syntaxhighlight>
}}
{{SubSection|title=Miscellaneous
        |text=
}}
{{ClassMethod
    |class=OP
    |name=__getstate__
    |call=__getstate__()
    |returns=dict
    |text=Returns a dictionary with persistent data about the object suitable for pickling and deep copies.
}}
{{ClassMethod
    |class=OP
    |name=__setstate__
    |call=__setstate__()
    |returns=dict
    |text=Reads the dictionary to update persistent details about the object, suitable for unpickling and deep copies.
}}
}}
<section end=HELPBODY />
{{History}}
{{#invoke:Category|list|Python Reference}}
